/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: interface_stats.proto */

#ifndef PROTOBUF_C_interface_5fstats_2eproto__INCLUDED
#define PROTOBUF_C_interface_5fstats_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Interfaces__IntfStats__ObservationPoint Interfaces__IntfStats__ObservationPoint;
typedef struct _Interfaces__IntfStats__IntfStats Interfaces__IntfStats__IntfStats;
typedef struct _Interfaces__IntfStats__ObservationWindow Interfaces__IntfStats__ObservationWindow;
typedef struct _Interfaces__IntfStats__IntfReport Interfaces__IntfStats__IntfReport;


/* --- enums --- */


/* --- messages --- */

struct  _Interfaces__IntfStats__ObservationPoint
{
  ProtobufCMessage base;
  /*
   * Serial number of the device reporting the stats
   */
  char *node_id;
  /*
   * Location id of the device reporting the stats
   */
  char *location_id;
};
#define INTERFACES__INTF_STATS__OBSERVATION_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__intf_stats__observation_point__descriptor) \
    , NULL, NULL }


struct  _Interfaces__IntfStats__IntfStats
{
  ProtobufCMessage base;
  char *if_name;
  /*
   * The counters can either be accumulative or deltas. This
   * is specified in the FCM_Report_Config table.
   */
  protobuf_c_boolean has_tx_bytes;
  uint64_t tx_bytes;
  protobuf_c_boolean has_rx_bytes;
  uint64_t rx_bytes;
  protobuf_c_boolean has_tx_packets;
  uint64_t tx_packets;
  protobuf_c_boolean has_rx_packets;
  uint64_t rx_packets;
  /*
   * Holds information about the interface such as its role in the
   * network, the network to which it's assigned, the vap type, id, etc
   * Read from Wifi_Inet_Config table
   */
  char *role;
};
#define INTERFACES__INTF_STATS__INTF_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__intf_stats__intf_stats__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _Interfaces__IntfStats__ObservationWindow
{
  ProtobufCMessage base;
  /*
   * The start fime for this window, represented as seconds since epoch
   */
  protobuf_c_boolean has_started_at;
  uint64_t started_at;
  /*
   * The end time for this window, represented as seconds since epoch
   */
  protobuf_c_boolean has_ended_at;
  uint64_t ended_at;
  /*
   * Statistics corresponding to per-interface
   */
  size_t n_intf_stats;
  Interfaces__IntfStats__IntfStats **intf_stats;
};
#define INTERFACES__INTF_STATS__OBSERVATION_WINDOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__intf_stats__observation_window__descriptor) \
    , 0,0, 0,0, 0,NULL }


/*
 * Report describing per-interface bandwidth consumed
 * metrics and statistics
 */
struct  _Interfaces__IntfStats__IntfReport
{
  ProtobufCMessage base;
  /*
   * Time when the messaged is reported, represented as seconds since epoch
   */
  protobuf_c_boolean has_reported_at;
  uint64_t reported_at;
  /*
   * Information to identify a device uniquely, serial no and location id
   */
  Interfaces__IntfStats__ObservationPoint *observation_point;
  /*
   * A fix time frame during which statistics are recorded. Each report
   * can contain one or more such windows
   */
  size_t n_observation_windows;
  Interfaces__IntfStats__ObservationWindow **observation_windows;
};
#define INTERFACES__INTF_STATS__INTF_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__intf_stats__intf_report__descriptor) \
    , 0,0, NULL, 0,NULL }


/* Interfaces__IntfStats__ObservationPoint methods */
void   interfaces__intf_stats__observation_point__init
                     (Interfaces__IntfStats__ObservationPoint         *message);
size_t interfaces__intf_stats__observation_point__get_packed_size
                     (const Interfaces__IntfStats__ObservationPoint   *message);
size_t interfaces__intf_stats__observation_point__pack
                     (const Interfaces__IntfStats__ObservationPoint   *message,
                      uint8_t             *out);
size_t interfaces__intf_stats__observation_point__pack_to_buffer
                     (const Interfaces__IntfStats__ObservationPoint   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__IntfStats__ObservationPoint *
       interfaces__intf_stats__observation_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__intf_stats__observation_point__free_unpacked
                     (Interfaces__IntfStats__ObservationPoint *message,
                      ProtobufCAllocator *allocator);
/* Interfaces__IntfStats__IntfStats methods */
void   interfaces__intf_stats__intf_stats__init
                     (Interfaces__IntfStats__IntfStats         *message);
size_t interfaces__intf_stats__intf_stats__get_packed_size
                     (const Interfaces__IntfStats__IntfStats   *message);
size_t interfaces__intf_stats__intf_stats__pack
                     (const Interfaces__IntfStats__IntfStats   *message,
                      uint8_t             *out);
size_t interfaces__intf_stats__intf_stats__pack_to_buffer
                     (const Interfaces__IntfStats__IntfStats   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__IntfStats__IntfStats *
       interfaces__intf_stats__intf_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__intf_stats__intf_stats__free_unpacked
                     (Interfaces__IntfStats__IntfStats *message,
                      ProtobufCAllocator *allocator);
/* Interfaces__IntfStats__ObservationWindow methods */
void   interfaces__intf_stats__observation_window__init
                     (Interfaces__IntfStats__ObservationWindow         *message);
size_t interfaces__intf_stats__observation_window__get_packed_size
                     (const Interfaces__IntfStats__ObservationWindow   *message);
size_t interfaces__intf_stats__observation_window__pack
                     (const Interfaces__IntfStats__ObservationWindow   *message,
                      uint8_t             *out);
size_t interfaces__intf_stats__observation_window__pack_to_buffer
                     (const Interfaces__IntfStats__ObservationWindow   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__IntfStats__ObservationWindow *
       interfaces__intf_stats__observation_window__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__intf_stats__observation_window__free_unpacked
                     (Interfaces__IntfStats__ObservationWindow *message,
                      ProtobufCAllocator *allocator);
/* Interfaces__IntfStats__IntfReport methods */
void   interfaces__intf_stats__intf_report__init
                     (Interfaces__IntfStats__IntfReport         *message);
size_t interfaces__intf_stats__intf_report__get_packed_size
                     (const Interfaces__IntfStats__IntfReport   *message);
size_t interfaces__intf_stats__intf_report__pack
                     (const Interfaces__IntfStats__IntfReport   *message,
                      uint8_t             *out);
size_t interfaces__intf_stats__intf_report__pack_to_buffer
                     (const Interfaces__IntfStats__IntfReport   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__IntfStats__IntfReport *
       interfaces__intf_stats__intf_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__intf_stats__intf_report__free_unpacked
                     (Interfaces__IntfStats__IntfReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Interfaces__IntfStats__ObservationPoint_Closure)
                 (const Interfaces__IntfStats__ObservationPoint *message,
                  void *closure_data);
typedef void (*Interfaces__IntfStats__IntfStats_Closure)
                 (const Interfaces__IntfStats__IntfStats *message,
                  void *closure_data);
typedef void (*Interfaces__IntfStats__ObservationWindow_Closure)
                 (const Interfaces__IntfStats__ObservationWindow *message,
                  void *closure_data);
typedef void (*Interfaces__IntfStats__IntfReport_Closure)
                 (const Interfaces__IntfStats__IntfReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor interfaces__intf_stats__observation_point__descriptor;
extern const ProtobufCMessageDescriptor interfaces__intf_stats__intf_stats__descriptor;
extern const ProtobufCMessageDescriptor interfaces__intf_stats__observation_window__descriptor;
extern const ProtobufCMessageDescriptor interfaces__intf_stats__intf_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_interface_5fstats_2eproto__INCLUDED */
