/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: mdns_records_telemetry.proto */

#ifndef PROTOBUF_C_mdns_5frecords_5ftelemetry_2eproto__INCLUDED
#define PROTOBUF_C_mdns_5frecords_5ftelemetry_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Interfaces__MdnsRecordsTelemetry__MdnsRecord Interfaces__MdnsRecordsTelemetry__MdnsRecord;
typedef struct _Interfaces__MdnsRecordsTelemetry__MdnsClient Interfaces__MdnsRecordsTelemetry__MdnsClient;
typedef struct _Interfaces__MdnsRecordsTelemetry__ObservationPoint Interfaces__MdnsRecordsTelemetry__ObservationPoint;
typedef struct _Interfaces__MdnsRecordsTelemetry__ObservationWindow Interfaces__MdnsRecordsTelemetry__ObservationWindow;
typedef struct _Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport;


/* --- enums --- */

typedef enum _Interfaces__MdnsRecordsTelemetry__MdnsRecordType {
  INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORD_TYPE__MDNS_RECORD_TYPE_UNSPECIFIED = 0,
  INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORD_TYPE__MDNS_RECORD_TYPE_A = 1,
  INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORD_TYPE__MDNS_RECORD_TYPE_NS = 2,
  INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORD_TYPE__MDNS_RECORD_TYPE_CNAME = 3,
  INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORD_TYPE__MDNS_RECORD_TYPE_PTR = 4,
  INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORD_TYPE__MDNS_RECORD_TYPE_TXT = 5,
  INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORD_TYPE__MDNS_RECORD_TYPE_SRV = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORD_TYPE)
} Interfaces__MdnsRecordsTelemetry__MdnsRecordType;

/* --- messages --- */

struct  _Interfaces__MdnsRecordsTelemetry__MdnsRecord
{
  ProtobufCMessage base;
  char *owner_name;
  protobuf_c_boolean has_type;
  Interfaces__MdnsRecordsTelemetry__MdnsRecordType type;
  char *domain_name;
  char *ip;
  protobuf_c_boolean has_res_desc;
  ProtobufCBinaryData res_desc;
  protobuf_c_boolean has_priority;
  uint32_t priority;
  protobuf_c_boolean has_weight;
  uint32_t weight;
  protobuf_c_boolean has_port;
  uint32_t port;
};
#define INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__mdns_records_telemetry__mdns_record__descriptor) \
    , NULL, 0,0, NULL, NULL, 0,{0,NULL}, 0,0, 0,0, 0,0 }


struct  _Interfaces__MdnsRecordsTelemetry__MdnsClient
{
  ProtobufCMessage base;
  char *mac;
  char *ip;
  size_t n_mdns_records;
  Interfaces__MdnsRecordsTelemetry__MdnsRecord **mdns_records;
};
#define INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__mdns_records_telemetry__mdns_client__descriptor) \
    , NULL, NULL, 0,NULL }


struct  _Interfaces__MdnsRecordsTelemetry__ObservationPoint
{
  ProtobufCMessage base;
  char *node_id;
  char *location_id;
};
#define INTERFACES__MDNS_RECORDS_TELEMETRY__OBSERVATION_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__mdns_records_telemetry__observation_point__descriptor) \
    , NULL, NULL }


struct  _Interfaces__MdnsRecordsTelemetry__ObservationWindow
{
  ProtobufCMessage base;
  protobuf_c_boolean has_started_at;
  uint64_t started_at;
  protobuf_c_boolean has_ended_at;
  uint64_t ended_at;
};
#define INTERFACES__MDNS_RECORDS_TELEMETRY__OBSERVATION_WINDOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__mdns_records_telemetry__observation_window__descriptor) \
    , 0,0, 0,0 }


struct  _Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport
{
  ProtobufCMessage base;
  Interfaces__MdnsRecordsTelemetry__ObservationPoint *observation_point;
  Interfaces__MdnsRecordsTelemetry__ObservationWindow *observation_window;
  size_t n_clients;
  Interfaces__MdnsRecordsTelemetry__MdnsClient **clients;
};
#define INTERFACES__MDNS_RECORDS_TELEMETRY__MDNS_RECORDS_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__mdns_records_telemetry__mdns_records_report__descriptor) \
    , NULL, NULL, 0,NULL }


/* Interfaces__MdnsRecordsTelemetry__MdnsRecord methods */
void   interfaces__mdns_records_telemetry__mdns_record__init
                     (Interfaces__MdnsRecordsTelemetry__MdnsRecord         *message);
size_t interfaces__mdns_records_telemetry__mdns_record__get_packed_size
                     (const Interfaces__MdnsRecordsTelemetry__MdnsRecord   *message);
size_t interfaces__mdns_records_telemetry__mdns_record__pack
                     (const Interfaces__MdnsRecordsTelemetry__MdnsRecord   *message,
                      uint8_t             *out);
size_t interfaces__mdns_records_telemetry__mdns_record__pack_to_buffer
                     (const Interfaces__MdnsRecordsTelemetry__MdnsRecord   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__MdnsRecordsTelemetry__MdnsRecord *
       interfaces__mdns_records_telemetry__mdns_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__mdns_records_telemetry__mdns_record__free_unpacked
                     (Interfaces__MdnsRecordsTelemetry__MdnsRecord *message,
                      ProtobufCAllocator *allocator);
/* Interfaces__MdnsRecordsTelemetry__MdnsClient methods */
void   interfaces__mdns_records_telemetry__mdns_client__init
                     (Interfaces__MdnsRecordsTelemetry__MdnsClient         *message);
size_t interfaces__mdns_records_telemetry__mdns_client__get_packed_size
                     (const Interfaces__MdnsRecordsTelemetry__MdnsClient   *message);
size_t interfaces__mdns_records_telemetry__mdns_client__pack
                     (const Interfaces__MdnsRecordsTelemetry__MdnsClient   *message,
                      uint8_t             *out);
size_t interfaces__mdns_records_telemetry__mdns_client__pack_to_buffer
                     (const Interfaces__MdnsRecordsTelemetry__MdnsClient   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__MdnsRecordsTelemetry__MdnsClient *
       interfaces__mdns_records_telemetry__mdns_client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__mdns_records_telemetry__mdns_client__free_unpacked
                     (Interfaces__MdnsRecordsTelemetry__MdnsClient *message,
                      ProtobufCAllocator *allocator);
/* Interfaces__MdnsRecordsTelemetry__ObservationPoint methods */
void   interfaces__mdns_records_telemetry__observation_point__init
                     (Interfaces__MdnsRecordsTelemetry__ObservationPoint         *message);
size_t interfaces__mdns_records_telemetry__observation_point__get_packed_size
                     (const Interfaces__MdnsRecordsTelemetry__ObservationPoint   *message);
size_t interfaces__mdns_records_telemetry__observation_point__pack
                     (const Interfaces__MdnsRecordsTelemetry__ObservationPoint   *message,
                      uint8_t             *out);
size_t interfaces__mdns_records_telemetry__observation_point__pack_to_buffer
                     (const Interfaces__MdnsRecordsTelemetry__ObservationPoint   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__MdnsRecordsTelemetry__ObservationPoint *
       interfaces__mdns_records_telemetry__observation_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__mdns_records_telemetry__observation_point__free_unpacked
                     (Interfaces__MdnsRecordsTelemetry__ObservationPoint *message,
                      ProtobufCAllocator *allocator);
/* Interfaces__MdnsRecordsTelemetry__ObservationWindow methods */
void   interfaces__mdns_records_telemetry__observation_window__init
                     (Interfaces__MdnsRecordsTelemetry__ObservationWindow         *message);
size_t interfaces__mdns_records_telemetry__observation_window__get_packed_size
                     (const Interfaces__MdnsRecordsTelemetry__ObservationWindow   *message);
size_t interfaces__mdns_records_telemetry__observation_window__pack
                     (const Interfaces__MdnsRecordsTelemetry__ObservationWindow   *message,
                      uint8_t             *out);
size_t interfaces__mdns_records_telemetry__observation_window__pack_to_buffer
                     (const Interfaces__MdnsRecordsTelemetry__ObservationWindow   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__MdnsRecordsTelemetry__ObservationWindow *
       interfaces__mdns_records_telemetry__observation_window__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__mdns_records_telemetry__observation_window__free_unpacked
                     (Interfaces__MdnsRecordsTelemetry__ObservationWindow *message,
                      ProtobufCAllocator *allocator);
/* Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport methods */
void   interfaces__mdns_records_telemetry__mdns_records_report__init
                     (Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport         *message);
size_t interfaces__mdns_records_telemetry__mdns_records_report__get_packed_size
                     (const Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport   *message);
size_t interfaces__mdns_records_telemetry__mdns_records_report__pack
                     (const Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport   *message,
                      uint8_t             *out);
size_t interfaces__mdns_records_telemetry__mdns_records_report__pack_to_buffer
                     (const Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport *
       interfaces__mdns_records_telemetry__mdns_records_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__mdns_records_telemetry__mdns_records_report__free_unpacked
                     (Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Interfaces__MdnsRecordsTelemetry__MdnsRecord_Closure)
                 (const Interfaces__MdnsRecordsTelemetry__MdnsRecord *message,
                  void *closure_data);
typedef void (*Interfaces__MdnsRecordsTelemetry__MdnsClient_Closure)
                 (const Interfaces__MdnsRecordsTelemetry__MdnsClient *message,
                  void *closure_data);
typedef void (*Interfaces__MdnsRecordsTelemetry__ObservationPoint_Closure)
                 (const Interfaces__MdnsRecordsTelemetry__ObservationPoint *message,
                  void *closure_data);
typedef void (*Interfaces__MdnsRecordsTelemetry__ObservationWindow_Closure)
                 (const Interfaces__MdnsRecordsTelemetry__ObservationWindow *message,
                  void *closure_data);
typedef void (*Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport_Closure)
                 (const Interfaces__MdnsRecordsTelemetry__MdnsRecordsReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    interfaces__mdns_records_telemetry__mdns_record_type__descriptor;
extern const ProtobufCMessageDescriptor interfaces__mdns_records_telemetry__mdns_record__descriptor;
extern const ProtobufCMessageDescriptor interfaces__mdns_records_telemetry__mdns_client__descriptor;
extern const ProtobufCMessageDescriptor interfaces__mdns_records_telemetry__observation_point__descriptor;
extern const ProtobufCMessageDescriptor interfaces__mdns_records_telemetry__observation_window__descriptor;
extern const ProtobufCMessageDescriptor interfaces__mdns_records_telemetry__mdns_records_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_mdns_5frecords_5ftelemetry_2eproto__INCLUDED */
