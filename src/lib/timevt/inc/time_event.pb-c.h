/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: time_event.proto */

#ifndef PROTOBUF_C_time_5fevent_2eproto__INCLUDED
#define PROTOBUF_C_time_5fevent_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Sts__TimeEvent Sts__TimeEvent;
typedef struct _Sts__DeviceID Sts__DeviceID;
typedef struct _Sts__TimeEventsReport Sts__TimeEventsReport;


/* --- enums --- */


/* --- messages --- */

/*
 * Definition of time_event message
 */
struct  _Sts__TimeEvent
{
  ProtobufCMessage base;
  /*
   * monotonic time in [ms]
   */
  uint64_t time;
  /*
   * event category e.g DHCP_CLIENT, REDIRECTOR, CONTROLLER, GRE_LINK, WDS_LINK etc.
   */
  char *cat;
  /*
   * event source, origin - usually process/manager name
   */
  char *source;
  /*
   * event subject name: interface, module name, feature name etc.
   */
  char *subject;
  /*
   * event sequence name : ONE, START, STOP etc
   */
  char *seq;
  /*
   * event message
   */
  char *msg;
};
#define STS__TIME_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__time_event__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL }


struct  _Sts__DeviceID
{
  ProtobufCMessage base;
  char *node_id;
  char *firmware_version;
  char *location_id;
};
#define STS__DEVICE_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__device_id__descriptor) \
    , NULL, NULL, NULL }


struct  _Sts__TimeEventsReport
{
  ProtobufCMessage base;
  /*
   * device identification
   */
  Sts__DeviceID *deviceid;
  /*
   * report sequence number
   */
  uint32_t seqno;
  /*
   * report generation real UNIX standard time in ms
   */
  uint64_t realtime;
  /*
   * report generation monotonic time in ms
   */
  uint64_t monotime;
  /*
   * reported events
   */
  size_t n_events;
  Sts__TimeEvent **events;
};
#define STS__TIME_EVENTS_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sts__time_events_report__descriptor) \
    , NULL, 0, 0, 0, 0,NULL }


/* Sts__TimeEvent methods */
void   sts__time_event__init
                     (Sts__TimeEvent         *message);
size_t sts__time_event__get_packed_size
                     (const Sts__TimeEvent   *message);
size_t sts__time_event__pack
                     (const Sts__TimeEvent   *message,
                      uint8_t             *out);
size_t sts__time_event__pack_to_buffer
                     (const Sts__TimeEvent   *message,
                      ProtobufCBuffer     *buffer);
Sts__TimeEvent *
       sts__time_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__time_event__free_unpacked
                     (Sts__TimeEvent *message,
                      ProtobufCAllocator *allocator);
/* Sts__DeviceID methods */
void   sts__device_id__init
                     (Sts__DeviceID         *message);
size_t sts__device_id__get_packed_size
                     (const Sts__DeviceID   *message);
size_t sts__device_id__pack
                     (const Sts__DeviceID   *message,
                      uint8_t             *out);
size_t sts__device_id__pack_to_buffer
                     (const Sts__DeviceID   *message,
                      ProtobufCBuffer     *buffer);
Sts__DeviceID *
       sts__device_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__device_id__free_unpacked
                     (Sts__DeviceID *message,
                      ProtobufCAllocator *allocator);
/* Sts__TimeEventsReport methods */
void   sts__time_events_report__init
                     (Sts__TimeEventsReport         *message);
size_t sts__time_events_report__get_packed_size
                     (const Sts__TimeEventsReport   *message);
size_t sts__time_events_report__pack
                     (const Sts__TimeEventsReport   *message,
                      uint8_t             *out);
size_t sts__time_events_report__pack_to_buffer
                     (const Sts__TimeEventsReport   *message,
                      ProtobufCBuffer     *buffer);
Sts__TimeEventsReport *
       sts__time_events_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sts__time_events_report__free_unpacked
                     (Sts__TimeEventsReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Sts__TimeEvent_Closure)
                 (const Sts__TimeEvent *message,
                  void *closure_data);
typedef void (*Sts__DeviceID_Closure)
                 (const Sts__DeviceID *message,
                  void *closure_data);
typedef void (*Sts__TimeEventsReport_Closure)
                 (const Sts__TimeEventsReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor sts__time_event__descriptor;
extern const ProtobufCMessageDescriptor sts__device_id__descriptor;
extern const ProtobufCMessageDescriptor sts__time_events_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_time_5fevent_2eproto__INCLUDED */
