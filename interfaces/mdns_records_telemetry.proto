// Copyright (c) 2015, Plume Design Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. Neither the name of the Plume Design Inc. nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

package interfaces.mdns_records_telemetry;

enum MdnsRecordType {
  MDNS_RECORD_TYPE_UNSPECIFIED = 0;
  MDNS_RECORD_TYPE_A = 1;
  MDNS_RECORD_TYPE_NS = 2;
  MDNS_RECORD_TYPE_CNAME = 3;
  MDNS_RECORD_TYPE_PTR = 4;
  MDNS_RECORD_TYPE_TXT  = 5;
  MDNS_RECORD_TYPE_SRV  = 6;
}


message MdnsRecord {
  optional  string owner_name  = 1;
  optional  MdnsRecordType type = 2;
  optional  string domain_name = 3;
  optional  string ip = 4;
  optional  bytes  res_desc = 5;
  optional  uint32 priority = 6;
  optional  uint32 weight = 7;
  optional  uint32 port = 8;
}
    

message MdnsClient {
  optional string mac = 1;
  optional string ip = 2;
  repeated MdnsRecord mdns_records = 3;
}


message ObservationPoint {
  optional string node_id = 1;
  optional string location_id = 2;
}


message ObservationWindow {
  optional uint64 started_at = 1;
  optional uint64 ended_at = 2;
}


message MdnsRecordsReport {
  optional ObservationPoint observation_point = 1;
  optional ObservationWindow observation_window = 2;
  repeated MdnsClient clients = 3;
}

