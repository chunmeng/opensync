// Copyright (c) 2015, Plume Design Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. Neither the name of the Plume Design Inc. nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package gatekeeper.southbound.v1;

// Gatekeeper Request common fields
message GatekeeperCommonRequest {
    uint32 request_id = 1;
    bytes  device_id = 2; // MAC address
    string node_id = 3;
    string location_id = 4;
    string policy_rule = 5;
}

// DNS gatekeeper request
message GatekeeperFqdnReq {
    GatekeeperCommonRequest header = 1;
    string fqdn = 2;
}

// App gatekeeper request
message GatekeeperAppReq {
    GatekeeperCommonRequest header = 1;
    string app_name = 2;
}

// HTTPS SNI gatekeeper request
message GatekeeperHttpsSniReq {
    GatekeeperCommonRequest header = 1;
    string https_sni = 2;
}

// HTTP Host gatekeeper request
message GatekeeperHttpHostReq {
    GatekeeperCommonRequest header = 1;
    string http_host = 2;
}

// HTTP URL gatekeeper request
message GatekeeperHttpUrlReq {
    GatekeeperCommonRequest header = 1;
    string http_url = 2;
}

// IP flow direction definitions
enum GatekeeperFlowDirection {
    GATEKEEPER_FLOW_DIRECTION_UNSPECIFIED = 0;
    GATEKEEPER_FLOW_DIRECTION_OUTBOUND = 1;
    GATEKEEPER_FLOW_DIRECTION_INBOUND = 2;
    GATEKEEPER_FLOW_DIRECTION_LAN2LAN = 3;
}

// Originator definition, needed when presenting an IP flow tuple
enum GatekeeperFlowOriginator {
    GATEKEEPER_FLOW_ORIGINATOR_UNSPECIFIED = 0;
    GATEKEEPER_FLOW_ORIGINATOR_SOURCE = 1;
    GATEKEEPER_FLOW_ORIGINATOR_DESTINATION = 2;
}

// IPv4 tuple representation
message GatekeeperIpv4FlowTuple {
    uint32 source_ipv4 = 1;
    uint32 destination_ipv4 = 2;
    uint32 transport = 3;
    uint32 source_port = 4;
    uint32 destination_port = 5;
}

// IPv4 tuple Gatekeeper request
message GatekeeperIpv4TupleReq {
    GatekeeperCommonRequest header = 1;
    GatekeeperIpv4FlowTuple flow_ipv4 = 2;
    GatekeeperFlowDirection flow_direction = 3;
    GatekeeperFlowOriginator flow_originator = 4;
}

// IPv6 tuple representation
message GatekeeperIpv6FlowTuple {
    bytes source_ipv6 = 1;
    bytes destination_ipv6 = 2;
    uint32 transport = 3;
    uint32 source_port = 4;
    uint32 destination_port = 5;
}

// IPv6 tuple Gatekeeper request
message GatekeeperIpv6TupleReq {
    GatekeeperCommonRequest header = 1;
    GatekeeperIpv6FlowTuple flow_ipv6 = 2;
    GatekeeperFlowDirection flow_direction = 3;
    GatekeeperFlowOriginator flow_originator = 4;
}

// IPv4 Gatekeeper request (Check peer IP, the direction providing which policy to check for)
message GatekeeperIpv4Req {
    GatekeeperCommonRequest header = 1;
    uint32 addr_ipv4 = 2;
    GatekeeperFlowDirection flow_direction = 3;
    GatekeeperIpv4FlowTuple flow_ipv4 = 4;
    GatekeeperFlowOriginator flow_originator = 5;
}

// IPv6 Gatekeeper request (Check peer IP, the direction providing which policy to check for)
message GatekeeperIpv6Req {
    GatekeeperCommonRequest header = 1;
    bytes addr_ipv6 = 2;
    GatekeeperFlowDirection flow_direction = 3;
    GatekeeperIpv6FlowTuple flow_ipv6 = 4;
    GatekeeperFlowOriginator flow_originator = 5;
}

// Overall Gatekeeper request
message GatekeeperReq {
    GatekeeperFqdnReq req_fqdn = 1;
    GatekeeperIpv4Req req_ipv4 = 2;
    GatekeeperIpv6Req req_ipv6 = 3;
    GatekeeperIpv4TupleReq req_ipv4_tuple = 4;
    GatekeeperIpv6TupleReq req_ipv6_tuple = 5;
    GatekeeperAppReq req_app = 6;
    GatekeeperHttpsSniReq req_https_sni = 7;
    GatekeeperHttpHostReq req_http_host = 8;
    GatekeeperHttpUrlReq req_http_url = 9;
}

// Action definition
enum GatekeeperAction {
    GATEKEEPER_ACTION_UNSPECIFIED = 0;
    GATEKEEPER_ACTION_ACCEPT = 1;
    GATEKEEPER_ACTION_BLOCK = 2;
    GATEKEEPER_ACTION_REDIRECT = 3;
}

// Gatekeeper Reply common fields
message GatekeeperCommonReply {
    uint32 request_id = 1;
    GatekeeperAction action = 2;
    uint32 ttl = 3;
    string policy = 4;
    uint32 category_id = 5;
    uint32 confidence_level = 6;
}

message GatekeeperFqdnRedirectReply {
    uint32 redirect_ipv4 = 1;
    bytes redirect_ipv6 = 2;
    string redirect_cname = 3;
}
message GatekeeperFqdnReply {
    GatekeeperCommonReply header = 1;
    GatekeeperFqdnRedirectReply redirect = 2;
}

message GatekeeperIpv4Reply {
    GatekeeperCommonReply header = 1;
}

message GatekeeperIpv6Reply {
    GatekeeperCommonReply header = 1;
}

message GatekeeperIpv4TupleReply {
    GatekeeperCommonReply header = 1;
}

message GatekeeperIpv6TupleReply {
    GatekeeperCommonReply header = 1;
}

// App name gatekeeper reply
message GatekeeperAppReply {
    GatekeeperCommonReply header = 1;
}

// HTTPS SNI gatekeeper reply
message GatekeeperHttpsSniReply {
    GatekeeperCommonReply header = 1;
}

// HTTP Host gatekeeper reply
message GatekeeperHttpHostReply {
    GatekeeperCommonReply header = 1;
}

// HTTP URL gatekeeper reply
message GatekeeperHttpUrlReply {
    GatekeeperCommonReply header = 1;
}

// Overall Gatekeeper reply
message GatekeeperReply {
    GatekeeperFqdnReply reply_fqdn = 1;
    GatekeeperIpv4Reply reply_ipv4 = 2;
    GatekeeperIpv6Reply reply_ipv6 = 3;
    GatekeeperIpv4TupleReply reply_ipv4_tuple = 4;
    GatekeeperIpv6TupleReply reply_ipv6_tuple = 5;
    GatekeeperAppReply reply_app = 6;
    GatekeeperHttpsSniReply reply_https_sni = 7;
    GatekeeperHttpHostReply reply_http_host = 8;
    GatekeeperHttpUrlReply reply_http_url = 9;
}