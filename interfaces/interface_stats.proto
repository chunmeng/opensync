// Copyright (c) 2015, Plume Design Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. Neither the name of the Plume Design Inc. nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

package interfaces.intf_stats;

message ObservationPoint {
  // Serial number of the device reporting the stats
  optional string node_id = 1;

  // Location id of the device reporting the stats
  optional string location_id = 2;
}

message IntfStats {
  optional string if_name = 1;

  // The counters can either be accumulative or deltas. This
  // is specified in the FCM_Report_Config table.
  optional uint64 tx_bytes = 2;
  optional uint64 rx_bytes = 3;
  optional uint64 tx_packets = 4;
  optional uint64 rx_packets = 5;

  // Holds information about the interface such as its role in the
  // network, the network to which it's assigned, the vap type, id, etc
  // Read from Wifi_Inet_Config table
  optional string role = 6;
}

message ObservationWindow {
  // The start fime for this window, represented as seconds since epoch
  optional uint64 started_at = 1;

  // The end time for this window, represented as seconds since epoch
  optional uint64 ended_at = 2;

  // Statistics corresponding to per-interface
  repeated IntfStats intf_stats = 3;
}

// Report describing per-interface bandwidth consumed
// metrics and statistics
message IntfReport {

  // Time when the messaged is reported, represented as seconds since epoch
  optional uint64 reported_at = 1;

  // Information to identify a device uniquely, serial no and location id
  optional ObservationPoint  observation_point = 2;

  // A fix time frame during which statistics are recorded. Each report
  // can contain one or more such windows
  repeated ObservationWindow observation_windows = 3;
}
